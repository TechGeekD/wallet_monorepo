FROM node:18.15.0-alpine AS base

# Install dependencies only when needed
FROM base AS deps
# Check https://github.com/nodejs/docker-node/tree/b4117f9333da4138b03a546ec926ef50a31506c3#nodealpine to understand why libc6-compat might be needed.
RUN apk add --no-cache libc6-compat
WORKDIR /app

# Install dependencies based on the preferred package manager
COPY packages/frontend/package.json yarn.lock* ./
RUN yarn install --verbose --network-timeout 100000

# Rebuild the source code only when needed
FROM base AS builder

WORKDIR /app

COPY .eslintrc.js .prettierrc jest.config.js tsconfig.json tsconfig.build.json ./

COPY packages/frontend ./packages/frontend

COPY --from=deps /app/node_modules ./packages/frontend/node_modules

ENV NODE_ENV production
ENV PATH="${PATH}:/app/packages/frontend/node_modules/.bin"

# Next.js collects completely anonymous telemetry data about general usage.
# Learn more here: https://nextjs.org/telemetry
# Uncomment the following line in case you want to disable telemetry during the build.
ENV NEXT_TELEMETRY_DISABLED 1

WORKDIR /app/packages/frontend

RUN yarn build

# If using npm comment out above and use below instead
# RUN npm run build

# Production image, copy all the files and run next
FROM base AS runner
WORKDIR /app

ENV NODE_ENV production
# Uncomment the following line in case you want to disable telemetry during runtime.
ENV NEXT_TELEMETRY_DISABLED 1

RUN addgroup --system --gid 1001 nodejs
RUN adduser --system --uid 1001 nextjs

COPY --from=builder --chown=nextjs:nodejs /app/packages/frontend/public ./public

# Automatically leverage output traces to reduce image size
# https://nextjs.org/docs/advanced-features/output-file-tracing
COPY --from=builder --chown=nextjs:nodejs /app/packages/frontend/.next/standalone ./
COPY --from=builder --chown=nextjs:nodejs /app/packages/frontend/.next/static ./.next/static
COPY --chown=nextjs:nodejs .env ./.env

USER nextjs

EXPOSE 3001

ENV PORT 3001

CMD ["node", "server.js"]