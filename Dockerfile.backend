FROM node:18.15.0-alpine AS bknd-base
FROM percona/percona-server-mongodb:6.0 AS db-base

########################### Backend Install Dependencies #####################################

# Install dependencies only when needed
FROM bknd-base AS deps

# Check https://github.com/nodejs/docker-node/tree/b4117f9333da4138b03a546ec926ef50a31506c3#nodealpine to understand why libc6-compat might be needed.
RUN apk add --no-cache libc6-compat

WORKDIR /app

# ENV NODE_ENV production

# Install dependencies based on the preferred package manager
COPY packages/backend/package.json yarn.lock* ./
# RUN yarn install --frozen-lockfile
RUN yarn install --verbose --network-timeout 100000

# RUN \
#     if [ -f yarn.lock ]; then yarn --frozen-lockfile; \
#     elif [ -f package-lock.json ]; then npm ci; \
#     elif [ -f pnpm-lock.yaml ]; then yarn global add pnpm && pnpm i --frozen-lockfile; \
#     else echo "Lockfile not found." && exit 1; \
#     fi

ENV PORT 3000
EXPOSE 3000

CMD ["bash"]

################################## Backend Build #############################################

FROM bknd-base AS builder

WORKDIR /app

COPY .eslintrc.js .prettierrc jest.config.js tsconfig.json tsconfig.build.json ./

COPY packages/backend ./packages/backend

COPY --from=deps /app/node_modules ./packages/backend/node_modules

ENV NODE_ENV production
ENV PATH="${PATH}:/app/packages/backend/node_modules/.bin"

WORKDIR /app/packages/backend

RUN yarn build

ENV PORT 3000
EXPOSE 3000

# CMD ["yarn", "build"]
CMD ["bash"]

################################## Backend Deploy #############################################

FROM bknd-base AS runner

USER node

WORKDIR /app

ENV NODE_ENV production

# RUN addgroup --system --gid 1001 nodejsgroup
# RUN adduser --system --uid 1001 nodejsuser

COPY --from=builder --chown=node:node /app/packages/backend/node_modules ./node_modules
COPY --from=builder --chown=node:node /app/packages/backend/dist ./dist

# USER nodejsuser

# RUN pwd
# RUN ls -alR /app/dist

ENV NODE_ENV="${NODE_ENV}" \
    PATH="${PATH}:/app/node_modules/.bin" \
    USER="node"

ENV PORT 3000
EXPOSE 3000

# CMD ["node", "dist/src/main"]
ENTRYPOINT ["node", "dist/src/main"]

################################## Database #############################################
FROM db-base AS database
ENV PORT 27017
EXPOSE 27017

################################## Nginx #############################################

FROM nginx:alpine AS nginx

RUN chown -R nginx:nginx /var/cache/nginx && \
    chown -R nginx:nginx /var/log/nginx && \
    chown -R nginx:nginx /etc/nginx/conf.d

RUN touch /var/run/nginx.pid && \
    chown -R nginx:nginx /var/run/nginx.pid

RUN mkdir -p /var/www/clapper.club/html \ 
    && chown nginx:nginx -R /var/www/clapper.club/html

ENV NODE_APP_ROOT /var/www/clapper.club/html

ENV NEST_UPSTREAM_SERVER nest.clapper.local
ENV CRON_SVC_UPSTREAM_SERVER cron_svc.clapper.local
# ENV UPSTREAM_SERVER 127.0.0.1

WORKDIR $NODE_APP_ROOT

COPY ./nginx/start.sh ./

RUN chmod 755 ./start.sh

USER nginx

ENV USER="nginx"

# RUN apk add libcap && setcap 'cap_net_bind_service=+ep' $NODE_APP_ROOT # Fix bind permission for port 80 with non-root user

# ADD ./nginx/default.local.conf /tmp/app.conf
ADD ./nginx/default.conf /tmp/app.conf
ADD ./nginx/nginx.conf /etc/nginx/nginx.conf

ADD ./app/frontend ./

EXPOSE 80

CMD ["./start.sh"]

###############################################################################

FROM redis:alpine as redis
